<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cshtml" #>
<#@ Assembly Name="System.Data" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text.RegularExpressions" #>


<#
    DataTable tables = GetTables();
	DataTable columns = null; 

	var directory = Path.GetDirectoryName(this.Host.TemplateFile);
	var entitiesPath = @"\ProjectName\FolderName";
	var regExFilter = "(?<=src).+$";
	var entitiesFolder = Regex.Replace(directory, regExFilter, entitiesPath);

    foreach (DataRow row in tables.Rows)
    {
		var newFolder = Path.Combine(entitiesFolder, row["TABLE_NAME"].ToString());
		CreateFolder(newFolder);
    	columns = GetColumns(row["TABLE_NAME"].ToString());
#>  

@namespace MFRevMgr.Models
@model List<<#= row["TABLE_NAME"].ToString() #>>

@{
	ViewData["Title"] = "<#= row["TABLE_NAME"].ToString() #>s";
}

@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "__AjaxAntiForgeryForm" }))
{
    @Html.AntiForgeryToken()
}

<div class="container-fluid">
    <div class="row">
        <div class="col-lg-12 greyBorder-round">
            <div>&nbsp;</div>
            <div class="blueBar"><#= row["TABLE_NAME"].ToString() #>s</div>
            <div>
                <table id="tblModel" class="display compact" cellpadding="0" cellspacing="0">
                    <thead>
                        <tr>
<#
	foreach (DataRow cRows in columns.Rows)
    {
#>
                            <th><#= cRows["COLUMN_NAME"].ToString() #></th>
<#
}
#>
                            <th style="width:150px"></th>
                        </tr>
                    </thead>
                    <tbody>

                        @foreach (<#= row["TABLE_NAME"].ToString() #> m in Model)
                        {
                            <tr>

<#
	foreach (DataRow cRows in columns.Rows)
    {
#>
<# if(cRows["isPrimaryKey"] == "1") 
{
#>
                                <td class="<#= cRows["COLUMN_NAME"].ToString() #>">
                                    <span>@m.<#= cRows["COLUMN_NAME"].ToString() #></span>
                                </td>
<#
}
else
{
#>
                                <td class="<#= cRows["COLUMN_NAME"].ToString() #>">
                                    <span>@m.<#= cRows["COLUMN_NAME"].ToString() #></span>
                                    <input type="text" value="@m.<#= cRows["COLUMN_NAME"].ToString() #>" style="display:none;" size="15" />
                                </td>
<#
}
#>
<#
	}
#>
                                <td>
                                    <a class="Edit" href="javascript:;">Edit</a>
                                    <a class="Update" style="display: none" href="javascript:;">Update</a>
                                    <a class="Cancel" style="display: none" href="javascript:;">Cancel</a>
                                    <a class="Delete" href="javascript:;">Delete</a>
                                </td>
                            </tr>
                        }
                    </tbody>
                    <tfoot>
                        <tr>
<#
	foreach (DataRow cRows in columns.Rows)
    {
#>
                            <td></td>
<#
}
#>
                            <td>
                                <a id="cmdAdd" class="btn btn-outline-success pull-right">Add</a>
                            </td>
                        </tr>
                    </tfoot>
                </table>
            </div>
        </div>
    </div>
    <div id='myModal' class='modal'>
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div id='myModalContent'></div>
            </div>
        </div>
    </div>
</div>


@section Scripts{
    <link rel="stylesheet" type="text/css" href="~/lib/DataTables/datatables.min.css" />
    <script type="text/javascript" src="~/lib/DataTables/datatables.min.js"></script>

    <link rel="stylesheet" type="text/css" href="~/lib/DataTables/Responsive-2.2.9/css/responsive.dataTables.min.css" />
    <script type="text/javascript" src="~/lib/DataTables/Responsive-2.2.9//js/dataTables.responsive.min.js"></script>

    <script type="text/javascript" src="~/js/<#= row["TABLE_NAME"].ToString() #>.js"></script>
}

<#
	SaveFile(entitiesFolder, row["TABLE_NAME"].ToString(),"Index", this.GenerationEnvironment.ToString());
	this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
    }
#>

<#+
    private string Pascalize(object value)
    {
        Regex rx = new Regex(@"(?:[^a-zA-Z0-9]*)(?<first>[a-zA-Z0-9])(?<reminder>[a-zA-Z0-9]*)(?:[^a-zA-Z0-9]*)");
        return rx.Replace(value.ToString(), m => m.Groups["first"].ToString().ToUpper() + m.Groups["reminder"].ToString().ToLower());
    }

    private DataTable GetTables()
    {
            DataTable dt = new("TableNames");
            string connectionString = "";

            using SqlConnection conn = new(connectionString);
            using SqlDataAdapter da = new(conn.CreateCommand());

            da.SelectCommand.CommandType = CommandType.Text;
            da.SelectCommand.CommandText = "SELECT  TABLE_NAME FROM INFORMATION_SCHEMA.TABLES t where t.TABLE_TYPE = 'BASE TABLE' ORDER BY t.Table_Name";

            da.Fill(dt);

            return dt;
    }

    private DataTable GetColumns(string tableName)
    {
            DataTable dt = new("Columns");
            string connectionString = "";

            using SqlConnection conn = new(connectionString);
            using SqlDataAdapter da = new(conn.CreateCommand());

            da.SelectCommand.CommandType = CommandType.Text;
            da.SelectCommand.CommandText = @"select c.TABLE_NAME,
		                                            c.COLUMN_NAME,
		                                            c.ORDINAL_POSITION,
		                                            c.IS_NULLABLE,
		                                            isNull(k.CONSTRAINT_NAME,'') as CONSTRAINT_NAME,
                                                    case when isNull(k.CONSTRAINT_NAME,'') like 'PK%' then 1 else 0 end as isPrimaryKey
		                                            from INFORMATION_SCHEMA.columns c 
		                                            left join INFORMATION_SCHEMA.KEY_COLUMN_USAGE k on c.TABLE_NAME = k.TABLE_NAME 
                                                                                                   and c.COLUMN_NAME = k.COLUMN_NAME 
                                                                                                   and k.CONSTRAINT_NAME like 'PK%'
	                                            where c.TABLE_NAME = @tableName";
            da.SelectCommand.Parameters.AddWithValue("@tableName",tableName);

            da.Fill(dt);

            return dt;
    }

    public void CreateFolder(string folder)
    {
        if (!Directory.Exists(folder)) Directory.CreateDirectory(folder);
    }

	public void SaveFile(string folder, string fileName,string viewName, string content)
	{
		using (FileStream fs = new FileStream(Path.Combine(folder, fileName.Trim(), viewName + ".cshtml"), FileMode.Create))
		{
			using (StreamWriter str = new StreamWriter(fs))
			{
				str.WriteLine(content);
				str.Flush();
			}
		}
	}
#>
